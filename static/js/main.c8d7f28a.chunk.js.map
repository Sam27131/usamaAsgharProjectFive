{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","toggleAmajChord","setState","showAmajChord","state","toggleBmajChord","showBmajChord","toggleCmajChord","showCmajChord","toggleDmajChord","showDmajChord","toggleEmajChord","showEmajChord","toggleFmajChord","showFmajChord","toggleGmajChord","showGmajChord","toggleAminChord","showAminChord","toggleBminChord","showBminChord","toggleCminChord","showCminChord","toggleDminChord","showDminChord","toggleEminChord","showEminChord","toggleFminChord","showFminChord","toggleGminChord","showGminChord","chords","database","ref","on","response","newState","chordsCollection","val","key","push","className","onClick","this","src","aMajor","alt","bMajor","cMajor","dMajor","eMajor","fMajor","gMajor","aMinor","bMinor","cMinor","dMinor","eMinor","fMinor","gMinor","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8d7f28a.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAcR11MhGx4_OleQ-brP_CJpMFnxhqcjV8\",\n    authDomain: \"guitar-chords-app-fef40.firebaseapp.com\",\n    databaseURL: \"https://guitar-chords-app-fef40.firebaseio.com\",\n    projectId: \"guitar-chords-app-fef40\",\n    storageBucket: \"guitar-chords-app-fef40.appspot.com\",\n    messagingSenderId: \"702433788465\",\n    appId: \"1:702433788465:web:5755f322eb9ccfd4388b10\"\n};\n\n// Initializing Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// Exporting the CONFIGURED version of firebase\nexport default firebase;\n","////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////Pseudocode////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// This app will allow the user to click on buttons to see all the major and minor chords that can be played on a guitar\n// There are 7 major and 7 minor chords and so the user can click on 14 buttons in total\n// Each button will toggle a corresponding image showing how to play a chord (each button is labeled with a chord name)\n// Each button will have its own state defined in this.state; in this case each state will have a value of false and will be toggled to true when the user clicks the button\n// Individual functions will be applied to each individual button that will trigger only that button's state to toggle between true and false\n// The reason for using boolean states is so ternary conditions can be used\n// Essentially the condition will be 'if this.state.{Name of chord} is true ? display image of that chord (<img> tag) : else, display nothing\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\nimport firebase from './firebase';\nimport './index.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      // Setting the states of chord properties to false to be used later in ternary conditional rendering\n      // Setting them to false here will ensure that no image shows up when the app is loaded\n      showAmajChord: false,\n      showBmajChord: false,\n      showCmajChord: false,\n      showDmajChord: false,\n      showEmajChord: false,\n      showFmajChord: false,\n      showGmajChord: false,\n      showAminChord: false,\n      showBminChord: false,\n      showCminChord: false,\n      showDminChord: false,\n      showEminChord: false,\n      showFminChord: false,\n      showGminChord: false,\n      // Setting the state of 'chords' array to be empty\n      // This array will be populated with image URLs pulled from the firebase database\n      chords: [],\n    }\n  }\n\n  componentDidMount() {\n    // Creating a variable that holds a reference to the firebase database\n    const imageURLsRef = firebase.database().ref();\n\n    imageURLsRef.on('value', (response) => {\n      \n      // A variable that will store the new state of the empty 'chords' array defined above\n      const newState = [];\n\n      // Storing the response value from firebase into a new variable\n      const chordsCollection = response.val();\n\n      // The for loop here is used to turn the object chordsCollection into an array\n      for (let key in chordsCollection) {\n\n        // Using the .push method to push the values from the object chordsCollection into the empty array newState\n        newState.push(chordsCollection[key]);\n      }\n\n      // Setting the state of 'chords' array to 'newState' using this.setState\n      this.setState({\n        chords: newState\n      });\n    });\n  }\n\n  // Below are functions that will be applied to the onClick method on the buttons that will change the states to be true on button click and then false again on the next click\n  // Individual toggle functions for each chord are defined so that only the state of the individual button that is clicked on is changed and only that button's image shows\n  // For example, setting the state of showAmajChord to !this.state.showAmajChord will change the state from false to true rendering the image on the screen (see ternary condition statements starting line 206); the next click will again change the state back to false\n\n  toggleAmajChord = () => {\n    this.setState({\n      showAmajChord: !this.state.showAmajChord\n    })\n  }\n\n  toggleBmajChord = () => {\n    this.setState({\n      showBmajChord: !this.state.showBmajChord\n    })\n  }\n\n  toggleCmajChord = () => {\n    this.setState({\n      showCmajChord: !this.state.showCmajChord\n    })\n  }\n\n  toggleDmajChord = () => {\n    this.setState({\n      showDmajChord: !this.state.showDmajChord\n    })\n  }\n\n  toggleEmajChord = () => {\n    this.setState({\n      showEmajChord: !this.state.showEmajChord\n    })\n  }\n\n  toggleFmajChord = () => {\n    this.setState({\n      showFmajChord: !this.state.showFmajChord\n    })\n  }\n\n  toggleGmajChord = () => {\n    this.setState({\n      showGmajChord: !this.state.showGmajChord\n    })\n  }\n\n  toggleAminChord = () => {\n    this.setState({\n      showAminChord: !this.state.showAminChord\n    })\n  }\n\n  toggleBminChord = () => {\n    this.setState({\n      showBminChord: !this.state.showBminChord\n    })\n  }\n\n  toggleCminChord = () => {\n    this.setState({\n      showCminChord: !this.state.showCminChord\n    })\n  }\n\n  toggleDminChord = () => {\n    this.setState({\n      showDminChord: !this.state.showDminChord\n    })\n  }\n\n  toggleEminChord = () => {\n    this.setState({\n      showEminChord: !this.state.showEminChord\n    })\n  }\n\n  toggleFminChord = () => {\n    this.setState({\n      showFminChord: !this.state.showFminChord\n    })\n  }\n\n  toggleGminChord = () => {\n    this.setState({\n      showGminChord: !this.state.showGminChord\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App wrapper\">\n        <div className=\"infoContainer\">\n          <h1>learn how to play all the major and minor guitar chords</h1>\n          <h2>click any button below to see a picture of how to play that chord</h2>\n        </div>\n\n        <p>click a button once to see the picture and click it again to remove it from the screen</p>\n        \n        <div className=\"buttons wrapper\">\n          <div className=\"major\">\n            <h2>major chords</h2>\n            {/* Applying the unique toggle functions defined above to each respective individual button */}\n            <button onClick={this.toggleAmajChord}>A Major</button>\n            <button onClick={this.toggleBmajChord}>B Major</button>\n            <button onClick={this.toggleCmajChord}>C Major</button>\n            <button onClick={this.toggleDmajChord}>D Major</button>\n            <button onClick={this.toggleEmajChord}>E Major</button>\n            <button onClick={this.toggleFmajChord}>F Major</button>\n            <button onClick={this.toggleGmajChord}>G Major</button>\n          </div>\n          <div className=\"minor\">\n            <h2>minor chords</h2>\n            <button onClick={this.toggleAminChord}>A minor</button>\n            <button onClick={this.toggleBminChord}>B minor</button>\n            <button onClick={this.toggleCminChord}>C minor</button>\n            <button onClick={this.toggleDminChord}>D minor</button>\n            <button onClick={this.toggleEminChord}>E minor</button>\n            <button onClick={this.toggleFminChord}>F minor</button>\n            <button onClick={this.toggleGminChord}>G minor</button>\n          </div>\n        </div>\n\n        <div>\n\n          {/*\n          Using ternary conditional statements that check the boolean status of this.state.show***Chord.\n          When true, it will add an img tag to the DOM : else, it will remove the image from the DOM\n\n          Referenced code from following website: https://www.quora.com/Using-React-what-is-the-best-way-to-show-and-hide-an-image\n          Credit goes to users: Tobias Zucali and Robin Wieruch\n          */}\n\n          {/* Note: this.state.chords[0].(chordname) is referencing the firebase database and pulling the stored image URLs that are passed to the src attribute */}\n\n          {this.state.showAmajChord ? (<img src={this.state.chords[0].aMajor} alt=\"The fingering pattern of the A major Chord\"/>) : null}\n          {this.state.showBmajChord ? (<img src={this.state.chords[0].bMajor} alt=\"The fingering pattern of the B major Chord\"/>) : null}\n          {this.state.showCmajChord ? (<img src={this.state.chords[0].cMajor} alt=\"The fingering pattern of the C major Chord\"/>) : null}\n          {this.state.showDmajChord ? (<img src={this.state.chords[0].dMajor} alt=\"The fingering pattern of the D major Chord\"/>) : null}\n          {this.state.showEmajChord ? (<img src={this.state.chords[0].eMajor} alt=\"The fingering pattern of the E major Chord\"/>) : null}\n          {this.state.showFmajChord ? (<img src={this.state.chords[0].fMajor} alt=\"The fingering pattern of the F major Chord\"/>) : null}\n          {this.state.showGmajChord ? (<img src={this.state.chords[0].gMajor} alt=\"The fingering pattern of the G major Chord\"/>) : null}\n          {this.state.showAminChord ? (<img src={this.state.chords[0].aMinor} alt=\"The fingering pattern of the A minor Chord\"/>) : null}\n          {this.state.showBminChord ? (<img src={this.state.chords[0].bMinor} alt=\"The fingering pattern of the B minor Chord\"/>) : null}\n          {this.state.showCminChord ? (<img src={this.state.chords[0].cMinor} alt=\"The fingering pattern of the C minor Chord\"/>) : null}\n          {this.state.showDminChord ? (<img src={this.state.chords[0].dMinor} alt=\"The fingering pattern of the D minor Chord\"/>) : null}\n          {this.state.showEminChord ? (<img src={this.state.chords[0].eMinor} alt=\"The fingering pattern of the E minor Chord\"/>) : null}\n          {this.state.showFminChord ? (<img src={this.state.chords[0].fMinor} alt=\"The fingering pattern of the F minor Chord\"/>) : null}\n          {this.state.showGminChord ? (<img src={this.state.chords[0].gMinor} alt=\"The fingering pattern of the G minor Chord\"/>) : null}\n        </div>\n        <footer>\n          <p><span>&#169;</span> Copyright 2020 Usama Asghar <br/> All Rights Reserved.</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}